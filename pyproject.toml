[build-system]
requires = ["flit_core==3.9.0"]
build-backend = "flit_core.buildapi"

[project]
name = "boilercv"
version = "0.0.1"
description = "Computer vision routines suitable for nucleate pool boiling bubble analysis."
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.11"
classifiers = ["License :: OSI Approved :: MIT License"]
dependencies = [
    # ! Consider switching to pims instead
    # ? Contains pycine deps except for OpenCV
    "boilercine@git+https://github.com/blakeNaccarato/boilercine@046ee0146394bebf5693fe0c18bbcea3d3e64fe5",
    "boilercore>=0.0.1",
    "cmasher>=1.7.2",
    "colorcet>=3.0.1",
    "dvc>=3.10.1",
    "imageio[pyav]>=2.31.1",
    "ipykernel>=6.29.0",
    "loguru>=0.7.0",
    "matplotlib>=3.7.2",
    "myst-parser>=2.0.0",
    "nbdime>=4.0.1",
    "nbformat>=5.9.2",
    "numpy>=1.24.4",
    "opencv-contrib-python>=4.8.0.74",
    "pandas[hdf5,performance]>=2.0.2",
    "pillow>=10.0.0",
    "ploomber-engine>=0.0.30",
    "pre-commit>=3.6.0",
    "pyarrow>=14.0.1",
    "pydantic>=2",
    "pyqtgraph>=0.13.3",
    "pyside6>=6.5.2",
    "pytz>=2023.3",
    "ruamel.yaml>=0.17.32",
    "scikit-image>=0.21.0",
    "scipy>=1.11.1",
    "seaborn>=0.12.2",
    "sparklines>=0.4.2",
    "sympy>=1.12",
    "tqdm>=4.66.1",
    "xarray[accel,io,parallel]>=2023.7.0",
]
[[project.authors]]
name = "Blake Naccarato"
email = "blake.naccarato@gmail.com"
[project.urls]
Changes = "https://blakeNaccarato.github.io/boilercv/changelog.html"
Docs = "https://blakeNaccarato.github.io/boilercv"
Home = "https://github.com/blakeNaccarato/boilercv"
Tracker = "https://github.com/blakeNaccarato/boilercv/issues"
[project.optional-dependencies]
cv = [
    # ? Allow users to install their own OpenCV flavor, which may be different
    "opencv-python-headless>=4.9.0.80",
]
# ! All optional dependency groups below are removed prior to PyPI releases
core = [
    # ? For environment bootstrapping with `.tools/scripts/core.py`
    "copier==9.1.0",
    "cyclopts==2.4.1",
    "dulwich==0.21.7",
    "uv==0.1.16",
]
nodeps = [
    #? Forces a flavor of OpenCV. We fix that with `boilercine` in `dependencies`
    "pycine @ git+https://github.com/ottomatic-io/pycine@815cfca06cafc50745a43b2cd0168982225c6dca",
]
dev = [
    # * Like `dependencies`, but may move up the lower bound
    "opencv-python-headless==4.9.0.80",
    # ? SHA synced by `.tools/scripts/core.py`
    "boilercine @ git+https://github.com/blakeNaccarato/boilercine@046ee0146394bebf5693fe0c18bbcea3d3e64fe5",
    # ? SHA synced by `.tools/scripts/core.py`
    "boilercore @ git+https://github.com/blakeNaccarato/boilercore@6253cdac7207e469fdafb2fd5fe8b43a0d543d11",
    "cmasher==1.7.2",
    "colorcet==3.0.1",
    # ? Required by `boilercv.pre_repro`
    "dvc[gs]==3.45.0",
    "imageio[pyav]==2.34.0",
    "ipykernel==6.29.0",
    "loguru==0.7.2",
    "matplotlib==3.8.3",
    "myst-parser==2.0.0",
    "nbdime==4.0.1",
    "nbformat==5.9.2",
    "numpy==1.26.4",
    "opencv-contrib-python==4.9.0.80",
    "pandas[hdf5,performance]==2.2.0",
    # ? Synced by `.tools/scripts/core.py`
    "pandas-stubs~=2.2.0",
    "pillow==10.2.0",
    "ploomber-engine==0.0.32",
    "pre-commit==3.6.0",
    "pyarrow==15.0.0",
    "pydantic==2.6.1",
    "pyqtgraph==0.13.3",
    "pyside6==6.6.2",
    "pytz==2024.1",
    "ruamel.yaml==0.18.6",
    "scikit-image==0.22.0",
    "scipy==1.12.0",
    "seaborn==0.13.2",
    "sparklines==0.4.2",
    "sympy==1.12",
    "tqdm==4.66.2",
    "xarray[accel,io,parallel]==2024.1.1",
    # * Documentation
    "geopandas==0.14.3",
    "linkify-it-py==2.0.3",
    "myst-nb==1.0.0",
    "nbformat==5.9.2",
    "shapely==2.0.3",
    "sphinx-autobuild==2024.2.4",
    "sphinx-autodoc2==0.5.0",
    "sphinx-book-theme==1.1.2",
    "sphinx-design==0.5.0",
    "sphinx-thebe==0.3.1",
    "sphinx-tippy==0.4.1",
    "sphinx-togglebutton==0.3.2",
    "sphinxcontrib-bibtex==2.6.2",
    "sphinxcontrib-mermaid==0.9.2",
    "trackpy==0.6.1",
    # * Also in pre-commit
    "fawltydeps==0.15.0",
    "nb-clean==3.2.0",
    "ruff==0.2.1",
    # * Type checking
    "pyright==1.1.350",
    # * Testing
    "pytest==8.0.0",
    # * Publishing
    "flit==3.9.0",
    # ? For caching with dill, unlike stock PyPI version
    "cachier @ git+https://github.com/blakeNaccarato/cachier@0892f53dc8fd9fb8a7f959305a1a9ec692876dc0",
    # ? Plugins
    "pytest-cov==4.1.0",
    "pytest-custom-exit-code==0.3.0",
    "pytest-harvest==1.10.4",
    "pytest-plt==1.1.1",
    "pytest-xdist[psutil,setproctitle]==3.5.0",
    # ? Annotate test failures in PRs
    "pytest-github-actions-annotate-failures==0.2.0",
    # * Local dev machine
    # ? Debugging
    "debugpy==1.8.0",
    # ? Format
    "sourcery-cli==1.15.0",
    # ? Profiling
    "snakeviz==2.2.0",
    # ? For local publishing to PyPi with flit
    "keyring==24.3.0",
]

[tool.fawltydeps]
actions = ["check_undeclared"]
deps = ["pyproject.toml"]
code = ["src"]
# * ---------------------------------------------------------------------------------- *
[tool.fawltydeps.custom_mapping]
ipykernel = ["IPython"]
boilercore = ["boilercore"]
# * ---------------------------------------------------------------------------------- *

[tool.pytest.ini_options]
addopts = '''
    --strict-config
    --strict-markers
    --color yes
    -p no:legacypaths
    -r a
    -n auto
    --dist loadfile
    --plots tests/plots
'''
cache_dir = ".cache/.pytest_cache"
markers = "slow"
testpaths = "tests"
xfail_strict = true

[tool.coverage.run]
branch = true
source = ["boilercv"]
[tool.coverage.report]
ignore_errors = true

[tool.pyright]
exclude = ["**/node_modules", "**/__pycache__", "**/.*", "submodules"]
stubPath = "submodules/typings"
typeCheckingMode = "strict"
# Default "true" in strict
analyzeUnannotatedFunctions = true
strictParameterNoneValue = true
enableTypeIgnoreComments = true
disableBytesTypePromotions = true
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
# Default "false" in strict
deprecateTypingAliases = false
enableExperimentalFeatures = false
# Default "warning" in strict
reportMissingModuleSource = "warning"
# Default "error" in strict
reportMissingImports = "warning"
reportInvalidTypeForm = "warning"
reportUndefinedVariable = "warning"
reportAssertAlwaysTrue = "warning"
reportInvalidStringEscapeSequence = "warning"
reportInvalidTypeVarUse = "warning"
reportMissingTypeStubs = "none"                # Overeager
reportSelfClsParameterName = "warning"
reportUnsupportedDunderAll = "warning"
reportUnusedExpression = "none"                # Handled by Ruff
reportWildcardImportFromLibrary = "warning"
reportAbstractUsage = "warning"
reportArgumentType = "warning"
reportAssertTypeFailure = "warning"
reportAssignmentType = "warning"
reportAttributeAccessIssue = "warning"
reportCallIssue = "warning"
reportGeneralTypeIssues = "warning"
reportInconsistentOverload = "warning"
reportIndexIssue = "warning"
reportInvalidTypeArguments = "warning"
reportNoOverloadImplementation = "warning"
reportOperatorIssue = "warning"
reportOptionalSubscript = "warning"
reportOptionalMemberAccess = "warning"
reportOptionalCall = "warning"
reportOptionalIterable = "warning"
reportOptionalContextManager = "warning"
reportOptionalOperand = "warning"
reportRedeclaration = "warning"
reportReturnType = "warning"
reportTypedDictNotRequiredAccess = "warning"
reportPrivateImportUsage = "none"              # Flaky regarding "not exported"
reportUnboundVariable = "warning"
reportUnusedCoroutine = "none"                 # Handled by Ruff
reportUnusedExcept = "warning"
reportFunctionMemberAccess = "warning"
reportIncompatibleMethodOverride = "warning"
reportIncompatibleVariableOverride = "warning"
reportOverlappingOverload = "warning"
reportPossiblyUnboundVariable = "warning"
reportConstantRedefinition = "none"
reportDeprecated = "warning"
reportDuplicateImport = "warning"
reportIncompleteStub = "warning"
reportInconsistentConstructor = "warning"
reportInvalidStubStatement = "warning"
reportMatchNotExhaustive = "warning"
reportMissingParameterType = "none"
reportMissingTypeArgument = "warning"
reportPrivateUsage = "none"                    # Ruff checks this well enough
reportTypeCommentUsage = "warning"
reportUnknownArgumentType = "none"
reportUnknownLambdaType = "none"
reportUnknownMemberType = "none"
reportUnknownParameterType = "none"
reportUnknownVariableType = "none"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportUnnecessaryContains = "warning"
reportUnnecessaryIsInstance = "warning"
reportUnusedClass = "none"                     # Handled by Ruff
reportUnusedImport = "none"                    # Handled by Ruff
reportUnusedFunction = "none"                  # Handled by Ruff
reportUnusedVariable = "none"                  # Handled by Ruff
reportUntypedBaseClass = "none"
reportUntypedClassDecorator = "warning"
reportUntypedFunctionDecorator = "none"        # Often out of our control
reportUntypedNamedTuple = "warning"
# Default "none" in strict
reportCallInDefaultInitializer = "none"
reportImplicitOverride = "none"
reportImplicitStringConcatenation = "none"
reportImportCycles = "none"
reportMissingSuperCall = "none"
reportPropertyTypeMismatch = "none"
reportShadowedImports = "none"
reportUninitializedInstanceVariable = "warning" # Ensure we define instance vars
reportUnnecessaryTypeIgnoreComment = "none"
reportUnusedCallResult = "none"

[tool.ruff]
cache-dir = ".cache/.ruff_cache"
extend-exclude = ["submodules"]
extend-include = ["*.ipynb"]
src = ["src"]
output-format = "grouped"
fix = true
preview = true
show-fixes = true

[tool.ruff.lint]
fixable = ["ALL"]
select = ["ALL"]
extend-ignore = [
    "ANN",     # Don't require type annotations
    "ARG005",  # Allow unused lambda argument. For consistency across df pipelines.
    "C408",    # Allow dict calls
    "COM",     # Allow magic commas and magic missing commas
    "CPY001",  # Don't check for copyright
    "D10",     # Missing docstrings
    "D20",     # Don't reformat docstrings in these ways
    "D213",    # Multi-line docstring summary should start at the second line
    "D402",    # False positives for parens in first line
    "D415",    # Don't check docstring punctuation, can be flaky for autodoc
    "D412",    # Allow blanks below headers in Google-style docstrings
    "DTZ",     # Timezones are important, but only contextually necessary.
    "E501",    # Don't check line length. Black handles this.
    "EM",      # Don't check for exception message issues
    "ERA",     # False positives. Don't get rid of commented out code.
    "FBT",     # Allow boolean "traps"
    "FIX002",  # Allow TODOs
    "FLY002",  # Allow different string representations
    "FURB140", # Don't replace comprehensions with starmap
    "G0",      # Allow f-strings, etc. in Loguru logging
    "INP001",  # False positives. Checks for packages missing `__init__.py`
    "ISC",     # False positives. Implicit string concatenation is fine.
    "PD009",   # Allow `df.iat`.
    "PD011",   # Allow use of `.values`. False positives.
    "PD013",   # Allow `stack` instead of `melt`. They're not a direct swap.
    "PD101",   # Allow use of nunique(). False positives
    "PD901",   # Allow `df` variable name. We are all consenting adults here.
    "PD011",   # Allow use of `.values`. False positives.
    "PLR6201", # Don't require set literal for membership checks
    "PGH003",  # Until black stops wrapping special ignores, let's allow bare
    "PIE804",  # Allow dict unpack even if unnecessary, consisent for df.assign{**...}
    "PLC2701", # Allow private name imports
    "PLR0913", # Allow more than five function arguments
    "PLR0914", # Allow lots of local variables
    "PLR0917", # Allow more than five positional arguments
    "PLR1704", # Allow redefining arguments, often for sanitization
    "PLR2004", # Allow magic values. This check is too sensitive
    "PLR6201", # Don't require set literal for membership checks
    "PLR6301", # Allow methods that don't reference self, may be overridden
    "PLW0108", # Don't warn about unnecessary lambda. Often needed in pandas chains
    "PLW2901", # For loop variable
    "RET",     # Return checks are flaky, Sourcery does fine analysing these paths
    "S301",    # Don't warn about pickling.
    "S403",    # Don't warn about pickle-like modules.
    "S404",    # Don't warn about subprocess.
    "TCH",     # Type checking linter doesn't play nicely with pydantic
    "TD",      # Disable to-do validation. Too pedantic for now.
    "TRY003",  # Allow long exception messages
    "W2",      # Allow whitespace issues. Fixed automatically by black.
]

[tool.ruff.lint.isort]
split-on-trailing-comma = false
[tool.ruff.format]
skip-magic-trailing-comma = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.extend-per-file-ignores]
"**/*.ipynb" = [
    "B018", # Allow "useless" expressions, which do suppress outputs in notebooks
    "E703", # Allow semicolons to suppress outputs in notebooks
    "F821", # Allow undefined names, such as `display`
    "S101", # Allow assert
    "T201", # Allow print in notebooks
]
"docs/**" = [
    "E402", # Need to allow imports below patches in docs notebooks
]
"tests/**" = [
    "ARG001", # Allow unused arguments
    "S101",   # Allow assert
    "SIM300", # Allow constants (expectations) on the RHS
    "SLF001", # Allow private member access in tests
]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["typer.Argument", "typer.Option"]
